package hogent.jeroencornelis.redditreader.domain;

import android.os.Parcel;
import android.os.Parcelable;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;
import hogent.jeroencornelis.redditreader.persistency.DaoSession;
import hogent.jeroencornelis.redditreader.persistency.PostDao;
import hogent.jeroencornelis.redditreader.persistency.SubredditDao;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "POSTS".
 */
public class Post implements Parcelable {

    private Long id;
    private String postId;
    private String title;
    private String author;
    private String thumbnail;
    private Integer score;
    private Integer comments;
    private long subredditId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PostDao myDao;

    private Subreddit subreddit;
    private Long subreddit__resolvedKey;


    public Post() {
    }

    public Post(Long id) {
        this.id = id;
    }
    public Post(Long id, String postId, String title, String author, String thumbnail, Integer score, Integer comments) {
        this.id = id;
        this.postId = postId;
        this.title = title;
        this.author = author;
        this.thumbnail = thumbnail;
        this.score = score;
        this.comments = comments;
    }

    public Post(Long id, String postId, String title, String author, String thumbnail, Integer score, Integer comments, long subredditId) {
        this(id,postId,title,author,thumbnail,score,comments);
        this.subredditId = subredditId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPostId() {
        return postId;
    }

    public void setPostId(String postId) {
        this.postId = postId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getThumbnail() {
        return thumbnail;
    }

    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    public Integer getComments() {
        return comments;
    }

    public void setComments(Integer comments) {
        this.comments = comments;
    }

    public long getSubredditId() {
        return subredditId;
    }

    public void setSubredditId(long subredditId) {
        this.subredditId = subredditId;
    }

    /** To-one relationship, resolved on first access. */
    public Subreddit getSubreddit() {
        long __key = this.subredditId;
        if (subreddit__resolvedKey == null || !subreddit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubredditDao targetDao = daoSession.getSubredditDao();
            Subreddit subredditNew = targetDao.load(__key);
            synchronized (this) {
                subreddit = subredditNew;
                subreddit__resolvedKey = __key;
            }
        }
        return subreddit;
    }

    public void setSubreddit(Subreddit subreddit) {
        if (subreddit == null) {
            throw new DaoException("To-one property 'subredditId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.subreddit = subreddit;
            subredditId = subreddit.getId();
            subreddit__resolvedKey = subredditId;
        }
    }


    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }


    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }


    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    /*
    private Long id;
    private String postId;
    private String title;
    private String author;
    private String thumbnail;
    private Integer score;
    private Integer comments;
    private long subredditId;
    */
    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(postId);
        dest.writeString(title);
        dest.writeString(author);
        dest.writeString(thumbnail);
        dest.writeInt(score);
        dest.writeInt(comments);
        dest.writeLong(subredditId);
    }

    public static final Parcelable.Creator<Post> CREATOR = new Parcelable.Creator<Post>() {
        public Post createFromParcel(Parcel in) {
            return new Post(in);
        }

        public Post[] newArray(int size) {
            return new Post[size];
        }
    };
    private Post(Parcel in) {
        id = in.readLong();
        postId = in.readString();
        title = in.readString();
        author = in.readString();
        thumbnail = in.readString();
        score = in.readInt();
        comments = in.readInt();
        subredditId = in.readLong();
    }
}
